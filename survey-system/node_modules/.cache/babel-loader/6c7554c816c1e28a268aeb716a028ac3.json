{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Survey System\\\\survey-system\\\\src\\\\components\\\\Categories\\\\Categories.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport categories from '../Data/PetsCategories';\nimport { PetsCard } from \"../PetsCards/PetsCards\";\nimport dogQuestions from \"../Data/Questions.json\";\nimport Elements from \"../Data/QuestionsAnswers.json\";\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SurveyCategories = props => {\n  _s();\n\n  const elementsMap = Elements.map((parentElement, i) => {\n    return parentElement;\n  });\n  const [getRedirectQuestions, setRedirectQuestions] = useState(false);\n  const [getSelectedAnswer, setSelectedAnswer] = useState(); // const[getAnswers, setAnswers]= useState<any>(answersTest);\n\n  const [getCurrentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [getNextQuestion, setNextQuestion] = useState({\n    Id: 0,\n    Name: \"\",\n    ParentId: 0,\n    children: []\n  });\n  /*const answersTest={\r\n      \r\n          question: \"What is the world's largest river by volume?\",\r\n          answers: [\"The Nile\", \"The Amazon\", \"The Congo\", \"The Yangtze\"],\r\n          correctAnswer: \"The Amazon\"\r\n      \r\n  }*/\n\n  const answersTest = {\n    question: Elements[getCurrentQuestionIndex].Name,\n    answers: Elements[getCurrentQuestionIndex].children.map((child, i) => {\n      return child;\n    })\n  };\n\n  const onAnswerClickHandler = option => {\n    //Find out if the answer have a child and render the child, if not move to the next question.\n    if (option.children.length > 0) {\n      setNextQuestion(option.children);\n    } else {//Move backwards within the tree.\n    }\n\n    alert(\"Answer Clicked\");\n    console.log(option);\n    setSelectedAnswer(option);\n    const elementsMap = Elements.map((parentElement, i) => {\n      return parentElement;\n    });\n    console.log(elementsMap);\n  };\n\n  const onNextQuestionClickHandler = () => {//Find within the tree which question has the Id of next question and deploy it.\n    //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\n  };\n\n  const onCategoryClickHandler = (e, id) => {\n    alert(\"Category Clicked\" + id);\n\n    switch (id) {\n      case 2:\n        setRedirectQuestions(true);\n        console.log(dogQuestions);\n        break;\n\n      case 1: //cat questions\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: getRedirectQuestions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: answersTest.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mt-16\",\n        children: /*#__PURE__*/_jsxDEV(AnswerLayout, {\n          answers: answersTest.answers,\n          onClick: onAnswerClickHandler,\n          onNextQuestionClickHandler: onNextQuestionClickHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: \"Choose a survey to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row flex-wrap justify-center mt-16\",\n        children: categories && categories.map((element, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => onCategoryClickHandler(e, element.Id),\n          children: /*#__PURE__*/_jsxDEV(PetsCard, {\n            imgSrc: element.ImgSrc,\n            imgAlt: element.ImgAlt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 18\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 16\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SurveyCategories, \"YVhx/2bk/36rUrUiLU4ObWNgtsA=\");\n\n_c = SurveyCategories;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyCategories\");","map":{"version":3,"sources":["C:/Development/Survey System/survey-system/src/components/Categories/Categories.tsx"],"names":["React","useState","Header","categories","PetsCard","dogQuestions","Elements","AnswerLayout","SurveyCategories","props","elementsMap","map","parentElement","i","getRedirectQuestions","setRedirectQuestions","getSelectedAnswer","setSelectedAnswer","getCurrentQuestionIndex","setCurrentQuestionIndex","getNextQuestion","setNextQuestion","Id","Name","ParentId","children","answersTest","question","answers","child","onAnswerClickHandler","option","length","alert","console","log","onNextQuestionClickHandler","onCategoryClickHandler","e","id","element","ImgSrc","ImgAlt"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"../Header/Header\";\r\nimport categories from '../Data/PetsCategories';\r\nimport { PetsCard } from \"../PetsCards/PetsCards\";\r\nimport dogQuestions from \"../Data/Questions.json\";\r\nimport { Test1 } from \"../Tests/Test1\";\r\nimport ExampleList from \"../Data/Example.json\";\r\nimport Elements from \"../Data/QuestionsAnswers.json\";\r\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\r\n\r\nexport interface IProps {\r\n   \r\n}\r\n\r\n\r\nexport const SurveyCategories: FC<IProps> = (props: IProps) => {   \r\n    const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n\r\n   \r\n    const[getRedirectQuestions, setRedirectQuestions]= useState<boolean>(false);\r\n    const[getSelectedAnswer, setSelectedAnswer] =  useState<any>();\r\n   // const[getAnswers, setAnswers]= useState<any>(answersTest);\r\n    const[getCurrentQuestionIndex, setCurrentQuestionIndex]= useState<number>(0);\r\n    const[getNextQuestion, setNextQuestion]= useState<any>({\r\n        Id:0,\r\n        Name:\"\",\r\n        ParentId:0,\r\n        children:[]\r\n    });\r\n    \r\n\r\n    /*const answersTest={\r\n        \r\n            question: \"What is the world's largest river by volume?\",\r\n            answers: [\"The Nile\", \"The Amazon\", \"The Congo\", \"The Yangtze\"],\r\n            correctAnswer: \"The Amazon\"\r\n        \r\n    }*/\r\n\r\n    const answersTest= {\r\n        question: Elements[getCurrentQuestionIndex].Name,\r\n        answers:Elements[getCurrentQuestionIndex].children.map((child:any, i:number)=>{\r\n           return child\r\n        })\r\n\r\n    }\r\n   \r\n    const onAnswerClickHandler =(option:any) => {\r\n     //Find out if the answer have a child and render the child, if not move to the next question.\r\n\r\n     if(option.children.length> 0){\r\n         setNextQuestion(option.children)\r\n     }\r\n     else{\r\n         //Move backwards within the tree.\r\n     }\r\n   \r\n   \r\n     alert(\"Answer Clicked\");\r\n      console.log(option);\r\n      setSelectedAnswer(option);\r\n      const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n\r\n     console.log(elementsMap);\r\n\r\n    }\r\n\r\n    const onNextQuestionClickHandler=()=>{\r\n        //Find within the tree which question has the Id of next question and deploy it.\r\n        //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\r\n    }\r\n    const onCategoryClickHandler =(e:any, id:number)=>{\r\n        alert(\"Category Clicked\"+ id);\r\n\r\n        switch(id){\r\n            case 2:\r\n                setRedirectQuestions(true);\r\n                console.log(dogQuestions);\r\n                break;\r\n            case 1:    \r\n            //cat questions\r\n        }\r\n        \r\n\r\n    } \r\n    return (\r\n        <>\r\n\r\n     {getRedirectQuestions\r\n        ? \r\n        <div>\r\n            <Header>{answersTest.question}</Header>\r\n                <div className=\"flex justify-center mt-16\">\r\n                     <AnswerLayout answers={answersTest.answers} onClick={onAnswerClickHandler} onNextQuestionClickHandler={onNextQuestionClickHandler}/>\r\n                </div>\r\n        </div>\r\n       \r\n        : \r\n        <div>\r\n        <Header>Choose a survey to get started</Header>\r\n           <div className=\"flex flex-row flex-wrap justify-center mt-16\">\r\n               {categories && categories.map((element:any, i:any)=>\r\n               <div key={i} onClick={(e:any)=> onCategoryClickHandler(e, element.Id)}>\r\n                 <PetsCard imgSrc={element.ImgSrc} imgAlt={element.ImgAlt} ></PetsCard>\r\n               </div>\r\n             )}\r\n           </div>\r\n        </div>\r\n      }\t\t  \r\n         </>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}