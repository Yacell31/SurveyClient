{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Survey System\\\\survey-system\\\\src\\\\components\\\\Categories\\\\Categories.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport categories from '../Data/PetsCategories';\nimport { PetsCard } from \"../PetsCards/PetsCards\";\nimport dogQuestions from \"../Data/Questions.json\";\nimport Elements from \"../Data/QuestionsAnswers.json\";\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\nimport ElementService from \"../../services/ElementService\";\nimport AnswerService from \"../../services/AnswerService\";\nimport getTreeData from \"../../common/getTreeData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SurveyCategories = props => {\n  _s();\n\n  const elementsMap = Elements.map((parentElement, i) => {\n    return parentElement;\n  });\n  const answersTest = {\n    question: Elements[0].Name,\n    answers: Elements[0].children.map((child, i) => {\n      return child;\n    })\n  };\n  let treeRoot = 0;\n  const [getSurveyQuestions, setSurveyQuestions] = useState();\n  const [getRedirectQuestions, setRedirectQuestions] = useState(false);\n  const [getSelectedAnswer, setSelectedAnswer] = useState(); // const[getAnswers, setAnswers]= useState<any>(answersTest);\n\n  const [getCurrentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  /*  const[getNextQuestion, setNextQuestion]= useState<any>({\r\n        Id:Elements[treeRoot].Id,\r\n        Name:Elements[treeRoot].Name,\r\n        ParentId:Elements[treeRoot].ParentId,\r\n        children:Elements[treeRoot].children\r\n    });*/\n\n  const [getNextQuestion, setNextQuestion] = useState();\n  const [getCurrentQuestion, setCurrentQuestion] = useState();\n  const [IsNextQuestion, setIsNextQuestion] = useState(false);\n  const [getTypedResponses, setTypedResponses] = useState({\n    Id: 0,\n    value: ''\n  });\n  const [getAnswerList, setAnswerList] = useState([]);\n  const elementService = new ElementService();\n  const answerService = new AnswerService();\n\n  const onAnswerClickHandler = option => {\n    //Find out if the answer have a child and render the child, if not move to the next question.\n    let tempAnswers = getAnswerList;\n    tempAnswers[option.parentId] = option.id;\n    setAnswerList(tempAnswers);\n\n    if (option.children.length > 0) {\n      setCurrentQuestion(option);\n      setIsNextQuestion(true);\n      console.log(option.children);\n    } else {\n      //   console.log(treeRoot);\n      setIsNextQuestion(false);\n      console.log(\"Incrementing state\");\n    }\n\n    setSelectedAnswer(option);\n    const elementsMap = Elements.map((parentElement, i) => {\n      return parentElement;\n    });\n  };\n\n  const onTypeTextValueHandler = (e, elementId) => {\n    console.log(getCurrentQuestionIndex);\n    var response = e.target.value;\n    let tempAnswers = getAnswerList;\n    tempAnswers[elementId] = response;\n    setAnswerList(tempAnswers);\n    console.log(tempAnswers);\n    /* let answer={id:elementId, answerText: response};\r\n     const answerList=[...getAnswerList];\r\n     answerList.push(answer);*/\n    //setTypedResponses({Id: elementId, value:response});\n\n    setIsNextQuestion(false); //console.log(elementId);\n\n    /*const onchangeInput = (val, index) =>{\r\n    temp[index] = val.target.value\r\n    console.log(temp)*/\n  };\n\n  const onNextQuestionClickHandler = () => {\n    //Debugging logs\n    // console.log(getCurrentQuestionIndex);\n    // console.log(getTypedResponses);\n    console.log(getAnswerList);\n\n    if (IsNextQuestion) {\n      setNextQuestion(getCurrentQuestion);\n    } else {\n      let nextIndex = getCurrentQuestionIndex;\n      nextIndex++;\n      setCurrentQuestionIndex(nextIndex);\n      setNextQuestion({\n        Id: getSurveyQuestions[nextIndex].id,\n        Name: getSurveyQuestions[nextIndex].name,\n        ParentId: getSurveyQuestions[nextIndex].parentId,\n        children: getSurveyQuestions[nextIndex].children\n      });\n    } // setCurrentQuestion(getNextQuestion);\n    //Find within the tree which question has the Id of next question and deploy it.\n    //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\n\n  };\n\n  const onCategoryClickHandler = (e, id) => {\n    alert(\"Category Clicked\" + id); //Load Axios with questions from backend.\n\n    const fetchQuestionList = async () => {\n      const questionList = await elementService.GetElementListByCategory(id);\n\n      if (questionList) {\n        var treeData = getTreeData(questionList);\n        console.log(getTreeData(questionList));\n        setSurveyQuestions(treeData);\n        console.log({\n          Id: treeData[treeRoot].id,\n          Name: treeData[treeRoot].name,\n          ParentId: treeData[treeRoot].parentId,\n          children: treeData[treeRoot].children\n        });\n        setNextQuestion({\n          Id: treeData[treeRoot].id,\n          Name: treeData[treeRoot].name,\n          ParentId: treeData[treeRoot].parentId,\n          children: treeData[treeRoot].children\n        });\n      }\n\n      ;\n    };\n\n    fetchQuestionList();\n    setRedirectQuestions(true);\n    console.log(dogQuestions); //cat questions\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: getRedirectQuestions && getNextQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: getNextQuestion.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mt-16\",\n        children: /*#__PURE__*/_jsxDEV(AnswerLayout, {\n          answers: getNextQuestion.children,\n          onClick: onAnswerClickHandler,\n          onNextQuestionClickHandler: onNextQuestionClickHandler,\n          onTypeTextReponseValue: onTypeTextValueHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: \"Choose a survey to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row flex-wrap justify-center mt-16\",\n        children: categories && categories.map((element, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => onCategoryClickHandler(e, element.Id),\n          children: /*#__PURE__*/_jsxDEV(PetsCard, {\n            imgSrc: element.ImgSrc,\n            imgAlt: element.ImgAlt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 18\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 16\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SurveyCategories, \"ZNaX/+gNXIU91DD7caO3WeoFBDg=\");\n\n_c = SurveyCategories;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyCategories\");","map":{"version":3,"sources":["C:/Development/Survey System/survey-system/src/components/Categories/Categories.tsx"],"names":["React","useState","Header","categories","PetsCard","dogQuestions","Elements","AnswerLayout","ElementService","AnswerService","getTreeData","SurveyCategories","props","elementsMap","map","parentElement","i","answersTest","question","Name","answers","children","child","treeRoot","getSurveyQuestions","setSurveyQuestions","getRedirectQuestions","setRedirectQuestions","getSelectedAnswer","setSelectedAnswer","getCurrentQuestionIndex","setCurrentQuestionIndex","getNextQuestion","setNextQuestion","getCurrentQuestion","setCurrentQuestion","IsNextQuestion","setIsNextQuestion","getTypedResponses","setTypedResponses","Id","value","getAnswerList","setAnswerList","elementService","answerService","onAnswerClickHandler","option","tempAnswers","parentId","id","length","console","log","onTypeTextValueHandler","e","elementId","response","target","onNextQuestionClickHandler","nextIndex","name","ParentId","onCategoryClickHandler","alert","fetchQuestionList","questionList","GetElementListByCategory","treeData","element","ImgSrc","ImgAlt"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAA+C,OAA/C;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAGA,OAAOC,QAAP,MAAqB,+BAArB;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAQA,OAAO,MAAMC,gBAA4B,GAAIC,KAAD,IAAmB;AAAA;;AAC3D,QAAMC,WAAW,GAAEP,QAAQ,CAACQ,GAAT,CAAa,CAACC,aAAD,EAAoBC,CAApB,KAA+B;AAC3D,WAAOD,aAAP;AACF,GAFiB,CAAnB;AAIC,QAAME,WAAW,GAAE;AAChBC,IAAAA,QAAQ,EAAEZ,QAAQ,CAAC,CAAD,CAAR,CAAYa,IADN;AAEhBC,IAAAA,OAAO,EAACd,QAAQ,CAAC,CAAD,CAAR,CAAYe,QAAZ,CAAqBP,GAArB,CAAyB,CAACQ,KAAD,EAAYN,CAAZ,KAAuB;AACrD,aAAOM,KAAP;AACF,KAFO;AAFQ,GAAnB;AAQD,MAAIC,QAAQ,GAAC,CAAb;AAEA,QAAK,CAACC,kBAAD,EAAqBC,kBAArB,IAA0CxB,QAAQ,EAAvD;AACA,QAAK,CAACyB,oBAAD,EAAuBC,oBAAvB,IAA8C1B,QAAQ,CAAU,KAAV,CAA3D;AACA,QAAK,CAAC2B,iBAAD,EAAoBC,iBAApB,IAA0C5B,QAAQ,EAAvD,CAjB2D,CAkB5D;;AACC,QAAK,CAAC6B,uBAAD,EAA0BC,uBAA1B,IAAoD9B,QAAQ,CAAS,CAAT,CAAjE;AACF;AACF;AACA;AACA;AACA;AACA;;AACI,QAAK,CAAC+B,eAAD,EAAkBC,eAAlB,IAAoChC,QAAQ,EAAjD;AACA,QAAK,CAACiC,kBAAD,EAAqBC,kBAArB,IAA0ClC,QAAQ,EAAvD;AACA,QAAK,CAACmC,cAAD,EAAiBC,iBAAjB,IAAoCpC,QAAQ,CAAU,KAAV,CAAjD;AACA,QAAK,CAACqC,iBAAD,EAAoBC,iBAApB,IAAwCtC,QAAQ,CAAM;AAACuC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,KAAK,EAAC;AAAb,GAAN,CAArD;AACA,QAAK,CAACC,aAAD,EAAgBC,aAAhB,IAAgC1C,QAAQ,CAAM,EAAN,CAA7C;AACA,QAAM2C,cAAc,GAAE,IAAIpC,cAAJ,EAAtB;AACA,QAAMqC,aAAa,GAAE,IAAIpC,aAAJ,EAArB;;AAIA,QAAMqC,oBAAoB,GAAGC,MAAD,IAAgB;AAC3C;AACA,QAAIC,WAAW,GAAGN,aAAlB;AACAM,IAAAA,WAAW,CAACD,MAAM,CAACE,QAAR,CAAX,GAA+BF,MAAM,CAACG,EAAtC;AACAP,IAAAA,aAAa,CAACK,WAAD,CAAb;;AAEA,QAAGD,MAAM,CAAC1B,QAAP,CAAgB8B,MAAhB,GAAwB,CAA3B,EAA6B;AACzBhB,MAAAA,kBAAkB,CAACY,MAAD,CAAlB;AACAV,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAAC1B,QAAnB;AACH,KAJD,MAKI;AACJ;AACGgB,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAGF;;AACAxB,IAAAA,iBAAiB,CAACkB,MAAD,CAAjB;AACA,UAAMlC,WAAW,GAAEP,QAAQ,CAACQ,GAAT,CAAa,CAACC,aAAD,EAAoBC,CAApB,KAA+B;AAC7D,aAAOD,aAAP;AACF,KAFmB,CAAnB;AAGD,GAtBD;;AAyBA,QAAMuC,sBAAsB,GAAC,CAACC,CAAD,EAAQC,SAAR,KAA2B;AACpDJ,IAAAA,OAAO,CAACC,GAAR,CAAYvB,uBAAZ;AACA,QAAI2B,QAAQ,GAAGF,CAAC,CAACG,MAAF,CAASjB,KAAxB;AACA,QAAIO,WAAW,GAAGN,aAAlB;AACAM,IAAAA,WAAW,CAACQ,SAAD,CAAX,GAAyBC,QAAzB;AACAd,IAAAA,aAAa,CAACK,WAAD,CAAb;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACD;AACP;AACA;AACQ;;AACAX,IAAAA,iBAAiB,CAAC,KAAD,CAAjB,CAXoD,CAapD;;AACJ;AACJ;AACA;AACK,GAjBD;;AAmBA,QAAMsB,0BAA0B,GAAC,MAAI;AACjC;AACD;AACA;AACCP,IAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;;AAEA,QAAGN,cAAH,EAAkB;AACdH,MAAAA,eAAe,CAACC,kBAAD,CAAf;AACH,KAFD,MAGI;AACD,UAAI0B,SAAgB,GAAC9B,uBAArB;AACA8B,MAAAA,SAAS;AACT7B,MAAAA,uBAAuB,CAAC6B,SAAD,CAAvB;AACA3B,MAAAA,eAAe,CAAC;AACfO,QAAAA,EAAE,EAAChB,kBAAkB,CAACoC,SAAD,CAAlB,CAA8BV,EADlB;AAEf/B,QAAAA,IAAI,EAACK,kBAAkB,CAACoC,SAAD,CAAlB,CAA8BC,IAFpB;AAGfC,QAAAA,QAAQ,EAACtC,kBAAkB,CAACoC,SAAD,CAAlB,CAA8BX,QAHxB;AAIf5B,QAAAA,QAAQ,EAACG,kBAAkB,CAACoC,SAAD,CAAlB,CAA8BvC;AAJxB,OAAD,CAAf;AAMN,KAnBoC,CAoBlC;AACC;AACA;;AACH,GAvBD;;AAwBA,QAAM0C,sBAAsB,GAAE,CAACR,CAAD,EAAQL,EAAR,KAAoB;AAC9Cc,IAAAA,KAAK,CAAC,qBAAoBd,EAArB,CAAL,CAD8C,CAGtC;;AACA,UAAMe,iBAAiB,GAAG,YAAY;AAClC,YAAMC,YAAY,GAAG,MAAMtB,cAAc,CAACuB,wBAAf,CAAwCjB,EAAxC,CAA3B;;AACA,UAAIgB,YAAJ,EAAkB;AAClB,YAAIE,QAAQ,GAAE1D,WAAW,CAACwD,YAAD,CAAzB;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY3C,WAAW,CAACwD,YAAD,CAAvB;AACAzC,QAAAA,kBAAkB,CAAC2C,QAAD,CAAlB;AACDhB,QAAAA,OAAO,CAACC,GAAR,CAAa;AACZb,UAAAA,EAAE,EAAC4B,QAAQ,CAAC7C,QAAD,CAAR,CAAmB2B,EADV;AAEZ/B,UAAAA,IAAI,EAACiD,QAAQ,CAAC7C,QAAD,CAAR,CAAmBsC,IAFZ;AAGZC,UAAAA,QAAQ,EAACM,QAAQ,CAAC7C,QAAD,CAAR,CAAmB0B,QAHhB;AAIZ5B,UAAAA,QAAQ,EAAC+C,QAAQ,CAAC7C,QAAD,CAAR,CAAmBF;AAJhB,SAAb;AAMCY,QAAAA,eAAe,CAAC;AACZO,UAAAA,EAAE,EAAC4B,QAAQ,CAAC7C,QAAD,CAAR,CAAmB2B,EADV;AAEZ/B,UAAAA,IAAI,EAACiD,QAAQ,CAAC7C,QAAD,CAAR,CAAmBsC,IAFZ;AAGZC,UAAAA,QAAQ,EAACM,QAAQ,CAAC7C,QAAD,CAAR,CAAmB0B,QAHhB;AAIZ5B,UAAAA,QAAQ,EAAC+C,QAAQ,CAAC7C,QAAD,CAAR,CAAmBF;AAJhB,SAAD,CAAf;AAOC;;AAAA;AACF,KApBH;;AAqBA4C,IAAAA,iBAAiB;AACjBtC,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAYhD,YAAZ,EA3BsC,CA6B1C;AACH,GA9BL;;AAiCA,sBACI;AAAA,cAEFqB,oBAAoB,IAAIM,eAAxB,gBAEE;AAAA,8BACI,QAAC,MAAD;AAAA,kBAASA,eAAe,CAACb;AAAzB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEQ;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,+BACK,QAAC,YAAD;AAAc,UAAA,OAAO,EAAEa,eAAe,CAACX,QAAvC;AAAiD,UAAA,OAAO,EAAEyB,oBAA1D;AAAgF,UAAA,0BAA0B,EAAEa,0BAA5G;AAAwI,UAAA,sBAAsB,EAAEL;AAAhK;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,gBAUE;AAAA,8BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEG;AAAK,QAAA,SAAS,EAAC,8CAAf;AAAA,kBACKnD,UAAU,IAAIA,UAAU,CAACW,GAAX,CAAe,CAACuD,OAAD,EAAcrD,CAAd,kBAC9B;AAAa,UAAA,OAAO,EAAGuC,CAAD,IAAUQ,sBAAsB,CAACR,CAAD,EAAIc,OAAO,CAAC7B,EAAZ,CAAtD;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,MAAM,EAAE6B,OAAO,CAACC,MAA1B;AAAkC,YAAA,MAAM,EAAED,OAAO,CAACE;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF,WAAUvD,CAAV;AAAA;AAAA;AAAA;AAAA,gBADe;AADnB;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA,mBADJ;AA0BH,CAnKM;;GAAML,gB;;KAAAA,gB","sourcesContent":["import React, { FC, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"../Header/Header\";\r\nimport categories from '../Data/PetsCategories';\r\nimport { PetsCard } from \"../PetsCards/PetsCards\";\r\nimport dogQuestions from \"../Data/Questions.json\";\r\nimport { Test1 } from \"../Tests/Test1\";\r\nimport ExampleList from \"../Data/Example.json\";\r\nimport Elements from \"../Data/QuestionsAnswers.json\";\r\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\r\nimport ElementService from \"../../services/ElementService\";\r\nimport AnswerService from \"../../services/AnswerService\";\r\nimport getTreeData from \"../../common/getTreeData\";\r\n\r\n\r\nexport interface IProps {\r\n   \r\n}\r\n\r\n\r\nexport const SurveyCategories: FC<IProps> = (props: IProps) => {   \r\n    const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n\r\n     const answersTest= {\r\n        question: Elements[0].Name,\r\n        answers:Elements[0].children.map((child:any, i:number)=>{\r\n           return child\r\n        })\r\n\r\n    }\r\n   \r\n    let treeRoot=0;\r\n\r\n    const[getSurveyQuestions, setSurveyQuestions]= useState<any>();\r\n    const[getRedirectQuestions, setRedirectQuestions]= useState<boolean>(false);\r\n    const[getSelectedAnswer, setSelectedAnswer] =  useState<any>();\r\n   // const[getAnswers, setAnswers]= useState<any>(answersTest);\r\n    const[getCurrentQuestionIndex, setCurrentQuestionIndex]= useState<number>(0);\r\n  /*  const[getNextQuestion, setNextQuestion]= useState<any>({\r\n        Id:Elements[treeRoot].Id,\r\n        Name:Elements[treeRoot].Name,\r\n        ParentId:Elements[treeRoot].ParentId,\r\n        children:Elements[treeRoot].children\r\n    });*/\r\n    const[getNextQuestion, setNextQuestion]= useState<any>();\r\n    const[getCurrentQuestion, setCurrentQuestion]= useState<any>();\r\n    const[IsNextQuestion, setIsNextQuestion]=useState<boolean>(false);\r\n    const[getTypedResponses, setTypedResponses]= useState<any>({Id:0, value:''});\r\n    const[getAnswerList, setAnswerList]= useState<any>([]);\r\n    const elementService= new ElementService();\r\n    const answerService= new AnswerService();\r\n  \r\n   \r\n   \r\n    const onAnswerClickHandler =(option:any) => {\r\n     //Find out if the answer have a child and render the child, if not move to the next question.\r\n     let tempAnswers = getAnswerList;\r\n     tempAnswers[option.parentId] = option.id;\r\n     setAnswerList(tempAnswers);\r\n\r\n     if(option.children.length> 0){\r\n         setCurrentQuestion(option)\r\n         setIsNextQuestion(true);\r\n         console.log(option.children);\r\n     }\r\n     else{\r\n     //   console.log(treeRoot);\r\n        setIsNextQuestion(false);\r\n        console.log(\"Incrementing state\");\r\n     \r\n\r\n     }\r\n      setSelectedAnswer(option);\r\n      const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n    }\r\n\r\n\r\n    const onTypeTextValueHandler=(e:any, elementId:number)=>{\r\n        console.log(getCurrentQuestionIndex);\r\n        var response = e.target.value;\r\n        let tempAnswers = getAnswerList;\r\n        tempAnswers[elementId] = response;\r\n        setAnswerList(tempAnswers);\r\n        console.log(tempAnswers)\r\n       /* let answer={id:elementId, answerText: response};\r\n        const answerList=[...getAnswerList];\r\n        answerList.push(answer);*/\r\n        //setTypedResponses({Id: elementId, value:response});\r\n        setIsNextQuestion(false);\r\n        \r\n        //console.log(elementId);\r\n    /*const onchangeInput = (val, index) =>{\r\n    temp[index] = val.target.value\r\n    console.log(temp)*/\r\n    }\r\n\r\n    const onNextQuestionClickHandler=()=>{\r\n        //Debugging logs\r\n       // console.log(getCurrentQuestionIndex);\r\n       // console.log(getTypedResponses);\r\n        console.log(getAnswerList);\r\n\r\n        if(IsNextQuestion){\r\n            setNextQuestion(getCurrentQuestion);\r\n        }\r\n        else{\r\n           let nextIndex:number=getCurrentQuestionIndex;\r\n           nextIndex++;\r\n           setCurrentQuestionIndex(nextIndex);\r\n           setNextQuestion({\r\n            Id:getSurveyQuestions[nextIndex].id,\r\n            Name:getSurveyQuestions[nextIndex].name,\r\n            ParentId:getSurveyQuestions[nextIndex].parentId,\r\n            children:getSurveyQuestions[nextIndex].children\r\n        });\r\n    }\r\n       // setCurrentQuestion(getNextQuestion);\r\n        //Find within the tree which question has the Id of next question and deploy it.\r\n        //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\r\n    }\r\n    const onCategoryClickHandler =(e:any, id:number)=>{\r\n        alert(\"Category Clicked\"+ id);\r\n\r\n                //Load Axios with questions from backend.\r\n                const fetchQuestionList = async () => {\r\n                    const questionList = await elementService.GetElementListByCategory(id) as [];\r\n                    if (questionList) {\r\n                    var treeData= getTreeData(questionList);\r\n                    console.log(getTreeData(questionList));\r\n                    setSurveyQuestions(treeData);\r\n                   console.log( {\r\n                    Id:treeData[treeRoot].id,\r\n                    Name:treeData[treeRoot].name,\r\n                    ParentId:treeData[treeRoot].parentId,\r\n                    children:treeData[treeRoot].children\r\n                    });\r\n                    setNextQuestion({\r\n                        Id:treeData[treeRoot].id,\r\n                        Name:treeData[treeRoot].name,\r\n                        ParentId:treeData[treeRoot].parentId,\r\n                        children:treeData[treeRoot].children\r\n                    });\r\n                     \r\n                    };\r\n                  };\r\n                fetchQuestionList();\r\n                setRedirectQuestions(true);\r\n                console.log(dogQuestions);\r\n  \r\n            //cat questions\r\n        }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n     {getRedirectQuestions && getNextQuestion\r\n        ? \r\n        <div>\r\n            <Header>{getNextQuestion.Name}</Header>\r\n                <div className=\"flex justify-center mt-16\">\r\n                     <AnswerLayout answers={getNextQuestion.children} onClick={onAnswerClickHandler} onNextQuestionClickHandler={onNextQuestionClickHandler} onTypeTextReponseValue={onTypeTextValueHandler}/>\r\n                </div>\r\n        </div>\r\n       \r\n        : \r\n        <div>\r\n        <Header>Choose a survey to get started</Header>\r\n           <div className=\"flex flex-row flex-wrap justify-center mt-16\">\r\n               {categories && categories.map((element:any, i:any)=>\r\n               <div key={i} onClick={(e:any)=> onCategoryClickHandler(e, element.Id)}>\r\n                 <PetsCard imgSrc={element.ImgSrc} imgAlt={element.ImgAlt} ></PetsCard>\r\n               </div>\r\n             )}\r\n           </div>\r\n        </div>\r\n      }\t\t  \r\n         </>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}