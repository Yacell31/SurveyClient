{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Survey System\\\\survey-system\\\\src\\\\components\\\\Categories\\\\Categories.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport categories from '../Data/PetsCategories';\nimport { PetsCard } from \"../PetsCards/PetsCards\";\nimport dogQuestions from \"../Data/Questions.json\";\nimport Elements from \"../Data/QuestionsAnswers.json\";\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\nimport ElementService from \"../../services/ElementService\";\nimport getTreeData from \"../../common/getTreeData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SurveyCategories = props => {\n  _s();\n\n  const elementsMap = Elements.map((parentElement, i) => {\n    return parentElement;\n  });\n  const answersTest = {\n    question: Elements[0].Name,\n    answers: Elements[0].children.map((child, i) => {\n      return child;\n    })\n  };\n  let treeRoot = 0;\n  const [getSurveyQuestions, setSurveyQuestions] = useState();\n  const [getRedirectQuestions, setRedirectQuestions] = useState(false);\n  const [getSelectedAnswer, setSelectedAnswer] = useState(); // const[getAnswers, setAnswers]= useState<any>(answersTest);\n\n  const [getCurrentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  /*  const[getNextQuestion, setNextQuestion]= useState<any>({\r\n        Id:Elements[treeRoot].Id,\r\n        Name:Elements[treeRoot].Name,\r\n        ParentId:Elements[treeRoot].ParentId,\r\n        children:Elements[treeRoot].children\r\n    });*/\n\n  const [getNextQuestion, setNextQuestion] = useState();\n  const [getCurrentQuestion, setCurrentQuestion] = useState();\n  const [IsNextQuestion, setIsNextQuestion] = useState(false);\n  const [getTypedResponses, setTypedResponses] = useState([]);\n  const elementService = new ElementService();\n  /*const answersTest={\r\n      \r\n          question: \"What is the world's largest river by volume?\",\r\n          answers: [\"The Nile\", \"The Amazon\", \"The Congo\", \"The Yangtze\"],\r\n          correctAnswer: \"The Amazon\"\r\n      \r\n  }*/\n\n  const onAnswerClickHandler = option => {\n    //Find out if the answer have a child and render the child, if not move to the next question.\n    if (option.children.length > 0) {\n      setCurrentQuestion(option);\n      setIsNextQuestion(true);\n      console.log(option.children);\n    } else {\n      //   console.log(treeRoot);\n      setIsNextQuestion(false);\n      console.log(\"Incrementing state\");\n    }\n\n    setSelectedAnswer(option);\n    const elementsMap = Elements.map((parentElement, i) => {\n      return parentElement;\n    });\n  };\n\n  const onTypeTextValueHandler = (e, elementId) => {\n    console.log(getCurrentQuestionIndex);\n    let answer = {\n      id: elementId,\n      answerText: e.target.value\n    };\n    const answerList = [...getTypedResponses];\n    answerList.push(answer);\n    setTypedResponses(answerList);\n    setIsNextQuestion(false);\n    console.log(elementId);\n    console.log(answerList);\n  };\n\n  const onNextQuestionClickHandler = () => {\n    console.log(getCurrentQuestionIndex);\n\n    if (IsNextQuestion) {\n      setNextQuestion(getCurrentQuestion);\n    } else {\n      let nextIndex = getCurrentQuestionIndex;\n      nextIndex++;\n      setCurrentQuestionIndex(nextIndex);\n      setNextQuestion({\n        Id: Elements[nextIndex].Id,\n        Name: Elements[nextIndex].Name,\n        ParentId: Elements[nextIndex].ParentId,\n        children: Elements[nextIndex].children\n      });\n    } // setCurrentQuestion(getNextQuestion);\n    //Find within the tree which question has the Id of next question and deploy it.\n    //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\n\n  };\n\n  const onCategoryClickHandler = (e, id) => {\n    alert(\"Category Clicked\" + id);\n\n    switch (id) {\n      case 2:\n        //Load Axios with questions from backend.\n        const fetchQuestionList = async () => {\n          const questionList = await elementService.GetElementListByCategory(1);\n\n          if (questionList) {\n            var treeData = getTreeData(questionList);\n            console.log(getTreeData(questionList));\n            setSurveyQuestions(treeData);\n            setNextQuestion({\n              Id: treeData[treeRoot].Id,\n              Name: treeData[treeRoot].Name,\n              ParentId: treeData[treeRoot].ParentId,\n              children: treeData[treeRoot].children\n            }); //console.log(treeData);\n          }\n\n          ;\n        };\n\n        fetchQuestionList();\n        setRedirectQuestions(true);\n        console.log(dogQuestions);\n        break;\n\n      case 1: //cat questions\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: getRedirectQuestions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: getNextQuestion.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mt-16\",\n        children: /*#__PURE__*/_jsxDEV(AnswerLayout, {\n          answers: getNextQuestion.children,\n          onClick: onAnswerClickHandler,\n          onNextQuestionClickHandler: onNextQuestionClickHandler,\n          onTypeTextReponseValue: onTypeTextValueHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: \"Choose a survey to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row flex-wrap justify-center mt-16\",\n        children: categories && categories.map((element, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => onCategoryClickHandler(e, element.Id),\n          children: /*#__PURE__*/_jsxDEV(PetsCard, {\n            imgSrc: element.ImgSrc,\n            imgAlt: element.ImgAlt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 18\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 16\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SurveyCategories, \"CKlw53u2muheLwGdLJY9W1+rPpQ=\");\n\n_c = SurveyCategories;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyCategories\");","map":{"version":3,"sources":["C:/Development/Survey System/survey-system/src/components/Categories/Categories.tsx"],"names":["React","useState","Header","categories","PetsCard","dogQuestions","Elements","AnswerLayout","ElementService","getTreeData","SurveyCategories","props","elementsMap","map","parentElement","i","answersTest","question","Name","answers","children","child","treeRoot","getSurveyQuestions","setSurveyQuestions","getRedirectQuestions","setRedirectQuestions","getSelectedAnswer","setSelectedAnswer","getCurrentQuestionIndex","setCurrentQuestionIndex","getNextQuestion","setNextQuestion","getCurrentQuestion","setCurrentQuestion","IsNextQuestion","setIsNextQuestion","getTypedResponses","setTypedResponses","elementService","onAnswerClickHandler","option","length","console","log","onTypeTextValueHandler","e","elementId","answer","id","answerText","target","value","answerList","push","onNextQuestionClickHandler","nextIndex","Id","ParentId","onCategoryClickHandler","alert","fetchQuestionList","questionList","GetElementListByCategory","treeData","element","ImgSrc","ImgAlt"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"../Header/Header\";\r\nimport categories from '../Data/PetsCategories';\r\nimport { PetsCard } from \"../PetsCards/PetsCards\";\r\nimport dogQuestions from \"../Data/Questions.json\";\r\nimport { Test1 } from \"../Tests/Test1\";\r\nimport ExampleList from \"../Data/Example.json\";\r\nimport Elements from \"../Data/QuestionsAnswers.json\";\r\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\r\nimport ElementService from \"../../services/ElementService\";\r\nimport getTreeData from \"../../common/getTreeData\";\r\n\r\nexport interface IProps {\r\n   \r\n}\r\n\r\n\r\nexport const SurveyCategories: FC<IProps> = (props: IProps) => {   \r\n    const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n\r\n     const answersTest= {\r\n        question: Elements[0].Name,\r\n        answers:Elements[0].children.map((child:any, i:number)=>{\r\n           return child\r\n        })\r\n\r\n    }\r\n   \r\n    let treeRoot=0;\r\n\r\n    const[getSurveyQuestions, setSurveyQuestions]= useState<any>();\r\n    const[getRedirectQuestions, setRedirectQuestions]= useState<boolean>(false);\r\n    const[getSelectedAnswer, setSelectedAnswer] =  useState<any>();\r\n   // const[getAnswers, setAnswers]= useState<any>(answersTest);\r\n    const[getCurrentQuestionIndex, setCurrentQuestionIndex]= useState<number>(0);\r\n  /*  const[getNextQuestion, setNextQuestion]= useState<any>({\r\n        Id:Elements[treeRoot].Id,\r\n        Name:Elements[treeRoot].Name,\r\n        ParentId:Elements[treeRoot].ParentId,\r\n        children:Elements[treeRoot].children\r\n    });*/\r\n    const[getNextQuestion, setNextQuestion]= useState<any>();\r\n    const[getCurrentQuestion, setCurrentQuestion]= useState<any>();\r\n    const[IsNextQuestion, setIsNextQuestion]=useState<boolean>(false);\r\n    const[getTypedResponses, setTypedResponses]= useState<any>([]);\r\n    const elementService= new ElementService();\r\n   \r\n    \r\n\r\n    /*const answersTest={\r\n        \r\n            question: \"What is the world's largest river by volume?\",\r\n            answers: [\"The Nile\", \"The Amazon\", \"The Congo\", \"The Yangtze\"],\r\n            correctAnswer: \"The Amazon\"\r\n        \r\n    }*/\r\n\r\n  \r\n   \r\n    const onAnswerClickHandler =(option:any) => {\r\n     //Find out if the answer have a child and render the child, if not move to the next question.\r\n\r\n     if(option.children.length> 0){\r\n         setCurrentQuestion(option)\r\n         setIsNextQuestion(true);\r\n         console.log(option.children);\r\n     }\r\n     else{\r\n     //   console.log(treeRoot);\r\n        setIsNextQuestion(false);\r\n        console.log(\"Incrementing state\");\r\n     \r\n\r\n     }\r\n      setSelectedAnswer(option);\r\n      const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n    }\r\n\r\n\r\n    const onTypeTextValueHandler=(e:any, elementId:number)=>{\r\n        console.log(getCurrentQuestionIndex);\r\n        let answer={id:elementId, answerText: e.target.value};\r\n        const answerList=[...getTypedResponses];\r\n        answerList.push(answer);\r\n        setTypedResponses(answerList);\r\n        setIsNextQuestion(false);\r\n        console.log(elementId);\r\n        console.log(answerList);\r\n    }\r\n\r\n    const onNextQuestionClickHandler=()=>{\r\n        console.log(getCurrentQuestionIndex);\r\n        \r\n        if(IsNextQuestion){\r\n            setNextQuestion(getCurrentQuestion);\r\n        }\r\n        else{\r\n           let nextIndex:number=getCurrentQuestionIndex;\r\n           nextIndex++;\r\n           setCurrentQuestionIndex(nextIndex);\r\n           setNextQuestion({\r\n            Id:Elements[nextIndex].Id,\r\n            Name:Elements[nextIndex].Name,\r\n            ParentId:Elements[nextIndex].ParentId,\r\n            children:Elements[nextIndex].children\r\n        });\r\n    }\r\n       // setCurrentQuestion(getNextQuestion);\r\n        //Find within the tree which question has the Id of next question and deploy it.\r\n        //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\r\n    }\r\n    const onCategoryClickHandler =(e:any, id:number)=>{\r\n        alert(\"Category Clicked\"+ id);\r\n\r\n        switch(id){\r\n            case 2:\r\n                //Load Axios with questions from backend.\r\n                const fetchQuestionList = async () => {\r\n                    const questionList = await elementService.GetElementListByCategory(1) as [];\r\n                    if (questionList) {\r\n                    var treeData= getTreeData(questionList);\r\n                    console.log(getTreeData(questionList));\r\n                    setSurveyQuestions(treeData);\r\n                    setNextQuestion({\r\n                        Id:treeData[treeRoot].Id,\r\n                        Name:treeData[treeRoot].Name,\r\n                        ParentId:treeData[treeRoot].ParentId,\r\n                        children:treeData[treeRoot].children\r\n                    });\r\n                      //console.log(treeData);\r\n                    };\r\n                  };\r\n                fetchQuestionList();\r\n                setRedirectQuestions(true);\r\n                console.log(dogQuestions);\r\n                break;\r\n            case 1:    \r\n            //cat questions\r\n        }\r\n        \r\n\r\n    } \r\n\r\n\r\n    return (\r\n        <>\r\n\r\n     {getRedirectQuestions\r\n        ? \r\n        <div>\r\n            <Header>{getNextQuestion.Name}</Header>\r\n                <div className=\"flex justify-center mt-16\">\r\n                     <AnswerLayout answers={getNextQuestion.children} onClick={onAnswerClickHandler} onNextQuestionClickHandler={onNextQuestionClickHandler} onTypeTextReponseValue={onTypeTextValueHandler}/>\r\n                </div>\r\n        </div>\r\n       \r\n        : \r\n        <div>\r\n        <Header>Choose a survey to get started</Header>\r\n           <div className=\"flex flex-row flex-wrap justify-center mt-16\">\r\n               {categories && categories.map((element:any, i:any)=>\r\n               <div key={i} onClick={(e:any)=> onCategoryClickHandler(e, element.Id)}>\r\n                 <PetsCard imgSrc={element.ImgSrc} imgAlt={element.ImgAlt} ></PetsCard>\r\n               </div>\r\n             )}\r\n           </div>\r\n        </div>\r\n      }\t\t  \r\n         </>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}