{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\Survey System\\\\survey-system\\\\src\\\\components\\\\Categories\\\\Categories.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport categories from '../Data/PetsCategories';\nimport { PetsCard } from \"../PetsCards/PetsCards\";\nimport dogQuestions from \"../Data/Questions.json\";\nimport Elements from \"../Data/QuestionsAnswers.json\";\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SurveyCategories = props => {\n  _s();\n\n  const elementsMap = Elements.map((parentElement, i) => {\n    return parentElement;\n  });\n  const answersTest = {\n    question: Elements[0].Name,\n    answers: Elements[0].children.map((child, i) => {\n      return child;\n    })\n  };\n  let treeRoot = 0;\n  const [getRedirectQuestions, setRedirectQuestions] = useState(false);\n  const [getSelectedAnswer, setSelectedAnswer] = useState(); // const[getAnswers, setAnswers]= useState<any>(answersTest);\n\n  const [getCurrentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [getNextQuestion, setNextQuestion] = useState({\n    Id: Elements[treeRoot].Id,\n    Name: Elements[treeRoot].Name,\n    ParentId: Elements[treeRoot].ParentId,\n    children: Elements[treeRoot].children\n  });\n  const [getCurrentQuestion, setCurrentQuestion] = useState(getNextQuestion);\n  /*const answersTest={\r\n      \r\n          question: \"What is the world's largest river by volume?\",\r\n          answers: [\"The Nile\", \"The Amazon\", \"The Congo\", \"The Yangtze\"],\r\n          correctAnswer: \"The Amazon\"\r\n      \r\n  }*/\n\n  const onAnswerClickHandler = option => {\n    //Find out if the answer have a child and render the child, if not move to the next question.\n    if (option.children.length > 0) {\n      setNextQuestion(option);\n      console.log(option.children);\n    } else {\n      console.log(treeRoot);\n      treeRoot = treeRoot + 1;\n      console.log(option);\n      console.log(treeRoot);\n      setNextQuestion({\n        Id: Elements[treeRoot].Id,\n        Name: Elements[treeRoot].Name,\n        ParentId: Elements[treeRoot].ParentId,\n        children: Elements[treeRoot].children\n      });\n    }\n\n    setSelectedAnswer(option);\n    const elementsMap = Elements.map((parentElement, i) => {\n      return parentElement;\n    });\n  };\n\n  const onNextQuestionClickHandler = () => {\n    setCurrentQuestion(getNextQuestion); //Find within the tree which question has the Id of next question and deploy it.\n    //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\n  };\n\n  const onCategoryClickHandler = (e, id) => {\n    alert(\"Category Clicked\" + id);\n\n    switch (id) {\n      case 2:\n        setRedirectQuestions(true);\n        console.log(dogQuestions);\n        break;\n\n      case 1: //cat questions\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: getRedirectQuestions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: getCurrentQuestion.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mt-16\",\n        children: /*#__PURE__*/_jsxDEV(AnswerLayout, {\n          answers: getCurrentQuestion.children,\n          onClick: onAnswerClickHandler,\n          onNextQuestionClickHandler: onNextQuestionClickHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: \"Choose a survey to get started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row flex-wrap justify-center mt-16\",\n        children: categories && categories.map((element, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => onCategoryClickHandler(e, element.Id),\n          children: /*#__PURE__*/_jsxDEV(PetsCard, {\n            imgSrc: element.ImgSrc,\n            imgAlt: element.ImgAlt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 18\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 16\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SurveyCategories, \"mVJVHdsPXTSrvynZ+yZDpNZj50k=\");\n\n_c = SurveyCategories;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyCategories\");","map":{"version":3,"sources":["C:/Development/Survey System/survey-system/src/components/Categories/Categories.tsx"],"names":["React","useState","Header","categories","PetsCard","dogQuestions","Elements","AnswerLayout","SurveyCategories","props","elementsMap","map","parentElement","i","answersTest","question","Name","answers","children","child","treeRoot","getRedirectQuestions","setRedirectQuestions","getSelectedAnswer","setSelectedAnswer","getCurrentQuestionIndex","setCurrentQuestionIndex","getNextQuestion","setNextQuestion","Id","ParentId","getCurrentQuestion","setCurrentQuestion","onAnswerClickHandler","option","length","console","log","onNextQuestionClickHandler","onCategoryClickHandler","e","id","alert","element","ImgSrc","ImgAlt"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"../Header/Header\";\r\nimport categories from '../Data/PetsCategories';\r\nimport { PetsCard } from \"../PetsCards/PetsCards\";\r\nimport dogQuestions from \"../Data/Questions.json\";\r\nimport { Test1 } from \"../Tests/Test1\";\r\nimport ExampleList from \"../Data/Example.json\";\r\nimport Elements from \"../Data/QuestionsAnswers.json\";\r\nimport { AnswerLayout } from \"../AnswerOptions/AnswerLayout\";\r\n\r\nexport interface IProps {\r\n   \r\n}\r\n\r\n\r\nexport const SurveyCategories: FC<IProps> = (props: IProps) => {   \r\n    const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n\r\n     const answersTest= {\r\n        question: Elements[0].Name,\r\n        answers:Elements[0].children.map((child:any, i:number)=>{\r\n           return child\r\n        })\r\n\r\n    }\r\n   \r\n    let treeRoot=0;\r\n\r\n    const[getRedirectQuestions, setRedirectQuestions]= useState<boolean>(false);\r\n    const[getSelectedAnswer, setSelectedAnswer] =  useState<any>();\r\n   // const[getAnswers, setAnswers]= useState<any>(answersTest);\r\n    const[getCurrentQuestionIndex, setCurrentQuestionIndex]= useState<number>(0);\r\n    const[getNextQuestion, setNextQuestion]= useState<any>({\r\n        Id:Elements[treeRoot].Id,\r\n        Name:Elements[treeRoot].Name,\r\n        ParentId:Elements[treeRoot].ParentId,\r\n        children:Elements[treeRoot].children\r\n    });\r\n    const[getCurrentQuestion, setCurrentQuestion]= useState<any>(getNextQuestion);\r\n   \r\n    \r\n\r\n    /*const answersTest={\r\n        \r\n            question: \"What is the world's largest river by volume?\",\r\n            answers: [\"The Nile\", \"The Amazon\", \"The Congo\", \"The Yangtze\"],\r\n            correctAnswer: \"The Amazon\"\r\n        \r\n    }*/\r\n\r\n  \r\n   \r\n    const onAnswerClickHandler =(option:any) => {\r\n     //Find out if the answer have a child and render the child, if not move to the next question.\r\n\r\n     if(option.children.length> 0){\r\n         setNextQuestion(option)\r\n         console.log(option.children);\r\n     }\r\n     else{\r\n        console.log(treeRoot);\r\n         treeRoot=treeRoot+1;\r\n         console.log(option);\r\n         console.log(treeRoot);\r\n        setNextQuestion({\r\n            Id:Elements[treeRoot].Id,\r\n            Name:Elements[treeRoot].Name,\r\n            ParentId:Elements[treeRoot].ParentId,\r\n            children:Elements[treeRoot].children\r\n        });\r\n     }\r\n      setSelectedAnswer(option);\r\n      const elementsMap =Elements.map((parentElement:any, i:number)=>{\r\n        return parentElement\r\n     })\r\n    }\r\n\r\n    const onNextQuestionClickHandler=()=>{\r\n        setCurrentQuestion(getNextQuestion);\r\n        //Find within the tree which question has the Id of next question and deploy it.\r\n        //setCurrentQuestionIndex(getCurrentQuestionIndex+1);\r\n    }\r\n    const onCategoryClickHandler =(e:any, id:number)=>{\r\n        alert(\"Category Clicked\"+ id);\r\n\r\n        switch(id){\r\n            case 2:\r\n                setRedirectQuestions(true);\r\n                console.log(dogQuestions);\r\n                break;\r\n            case 1:    \r\n            //cat questions\r\n        }\r\n        \r\n\r\n    } \r\n    return (\r\n        <>\r\n\r\n     {getRedirectQuestions\r\n        ? \r\n        <div>\r\n            <Header>{getCurrentQuestion.Name}</Header>\r\n                <div className=\"flex justify-center mt-16\">\r\n                     <AnswerLayout answers={getCurrentQuestion.children} onClick={onAnswerClickHandler} onNextQuestionClickHandler={onNextQuestionClickHandler}/>\r\n                </div>\r\n        </div>\r\n       \r\n        : \r\n        <div>\r\n        <Header>Choose a survey to get started</Header>\r\n           <div className=\"flex flex-row flex-wrap justify-center mt-16\">\r\n               {categories && categories.map((element:any, i:any)=>\r\n               <div key={i} onClick={(e:any)=> onCategoryClickHandler(e, element.Id)}>\r\n                 <PetsCard imgSrc={element.ImgSrc} imgAlt={element.ImgAlt} ></PetsCard>\r\n               </div>\r\n             )}\r\n           </div>\r\n        </div>\r\n      }\t\t  \r\n         </>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}